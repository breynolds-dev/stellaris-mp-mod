namespace = esap_ascension_paths_replacements


# Synthetic Evolution
country_event = {
	id = esap_ascension_paths_replacements.2550
	title = "utopia.2550.name"
	desc = "utopia.2550.desc"
	picture = GFX_evt_robot_assembly_plant
	show_sound = event_laboratory_sound
	
	is_triggered_only = yes
	
	option = {
		name = "utopia.2550.a"
		capital_scope = {
			enable_special_project = {
				name = "ESAP_SYNTHETIC_EVOLUTION_PROJECT"
				location = this
				owner = root
			}
		}
	}
}

# The Synthetic Age
country_event = {
	id = esap_ascension_paths_replacements.2551
	title = "utopia.2551.name"
	desc = "utopia.2551.desc"
	picture = GFX_evt_robot_assembly_plant
	show_sound = event_synthetic_evolution
	
	is_triggered_only = yes
	
	immediate = {
		set_country_flag = synthetic_empire	
		if = {
			limit = {
				Not = {
					has_ascension_perk = ap_mind_over_matter
				}
			}					
			create_species = {
				is_mod = yes
				name = this
				namelist = this
				plural = this
				class = "ROBOT"
				portrait = "default_robot"
				traits = {
					trait = "trait_mechanical"
					trait = "trait_robotic_3"
				}
				
				new_pop_resource_requirement = {
					type = robot_food
					value = 30.0
				}
				pops_auto_growth = 1.0
				
				pops_can_be_colonizers = yes
				pops_can_migrate = yes
				pops_can_reproduce = no
				pops_can_join_factions = yes
				pop_maintenance = 1
				can_generate_leaders = yes
				pops_can_be_slaves = yes
				pops_have_happiness = yes
				pop_ethics = random	#can also be pop_ethics = { some_ethic some_other_ethic etc }
				
				effect = {
					if = { limit = { host_has_dlc = "Synthetic Dawn Story Pack" }
						prev = {
							switch = {
								trigger = is_species_class
								HUM = { prev = { change_species_characteristics = { portrait = "sd_hum_robot" } } }
								MAM = { prev = { change_species_characteristics = { portrait = "sd_mam_robot" } } }
								REP = { prev = { change_species_characteristics = { portrait = "sd_rep_robot" } } }
								AVI = { prev = { change_species_characteristics = { portrait = "sd_avi_robot" } } }
								ART = { prev = { change_species_characteristics = { portrait = "sd_art_robot" } } }
								MOL = { prev = { change_species_characteristics = { portrait = "sd_mol_robot" } } }
								FUN = { prev = { change_species_characteristics = { portrait = "sd_fun_robot" } } }
								PLANT = { prev = { change_species_characteristics = { portrait = "sd_pla_robot" } } }
							}
						}
					}

					rename_species = {
						prompt_country = prev #If targeted country is a player they will get a popup asking for a name/plural/adjective combo. Otherwise the species will get a random name from the specified name_list
						name_list = robots_test #TODO[DE] Make sure this points to a release-quality list
					}
				}
			}
		}
		if = {
			limit = {
				has_ascension_perk = ap_mind_over_matter
				Not = {
					has_ascension_perk = ap_transcendence
				}
			}					
			create_species = {
				is_mod = yes
				name = this
				namelist = this
				plural = this
				class = "ROBOT"
				portrait = "default_robot"
				traits = {
					trait = "trait_mechanical"
					trait = "trait_robotic_3"
					trait = "trait_latent_psionic"
				}
				
				new_pop_resource_requirement = {
					type = robot_food
					value = 30.0
				}
				pops_auto_growth = 1.0
				
				pops_can_be_colonizers = yes
				pops_can_migrate = yes
				pops_can_reproduce = no
				pops_can_join_factions = yes
				pop_maintenance = 1
				can_generate_leaders = yes
				pops_can_be_slaves = yes
				pops_have_happiness = yes
				pop_ethics = random	#can also be pop_ethics = { some_ethic some_other_ethic etc }
				
				effect = {
					if = { limit = { host_has_dlc = "Synthetic Dawn Story Pack" }
						prev = {
							switch = {
								trigger = is_species_class
								HUM = { prev = { change_species_characteristics = { portrait = "sd_hum_robot" } } }
								MAM = { prev = { change_species_characteristics = { portrait = "sd_mam_robot" } } }
								REP = { prev = { change_species_characteristics = { portrait = "sd_rep_robot" } } }
								AVI = { prev = { change_species_characteristics = { portrait = "sd_avi_robot" } } }
								ART = { prev = { change_species_characteristics = { portrait = "sd_art_robot" } } }
								MOL = { prev = { change_species_characteristics = { portrait = "sd_mol_robot" } } }
								FUN = { prev = { change_species_characteristics = { portrait = "sd_fun_robot" } } }
								PLANT = { prev = { change_species_characteristics = { portrait = "sd_pla_robot" } } }
							}
						}
					}

					rename_species = {
						prompt_country = prev #If targeted country is a player they will get a popup asking for a name/plural/adjective combo. Otherwise the species will get a random name from the specified name_list
						name_list = robots_test #TODO[DE] Make sure this points to a release-quality list
					}
				}
			}
		}
		if = {
			limit = {
				has_ascension_perk = ap_transcendence
			}					
			create_species = {
				is_mod = yes
				name = this
				namelist = this
				plural = this
				class = "ROBOT"
				portrait = "default_robot"
				traits = {
					trait = "trait_mechanical"
					trait = "trait_robotic_3"
					trait = "trait_psionic"s
				}
				
				new_pop_resource_requirement = {
					type = robot_food
					value = 30.0
				}
				pops_auto_growth = 1.0
				
				pops_can_be_colonizers = yes
				pops_can_migrate = yes
				pops_can_reproduce = no
				pops_can_join_factions = yes
				pop_maintenance = 1
				can_generate_leaders = yes
				pops_can_be_slaves = yes
				pops_have_happiness = yes
				pop_ethics = random	#can also be pop_ethics = { some_ethic some_other_ethic etc }
				
				effect = {
					if = { limit = { host_has_dlc = "Synthetic Dawn Story Pack" }
						prev = {
							switch = {
								trigger = is_species_class
								HUM = { prev = { change_species_characteristics = { portrait = "sd_hum_robot" } } }
								MAM = { prev = { change_species_characteristics = { portrait = "sd_mam_robot" } } }
								REP = { prev = { change_species_characteristics = { portrait = "sd_rep_robot" } } }
								AVI = { prev = { change_species_characteristics = { portrait = "sd_avi_robot" } } }
								ART = { prev = { change_species_characteristics = { portrait = "sd_art_robot" } } }
								MOL = { prev = { change_species_characteristics = { portrait = "sd_mol_robot" } } }
								FUN = { prev = { change_species_characteristics = { portrait = "sd_fun_robot" } } }
								PLANT = { prev = { change_species_characteristics = { portrait = "sd_pla_robot" } } }
							}
						}
					}

					rename_species = {
						prompt_country = prev #If targeted country is a player they will get a popup asking for a name/plural/adjective combo. Otherwise the species will get a random name from the specified name_list
						name_list = robots_test #TODO[DE] Make sure this points to a release-quality list
					}
				}
			}
		}
		every_owned_pop = {
			limit = {
				species = {
					has_trait = trait_cybernetic 
				}
			}
			change_species = last_created
			tile = {
				if = {
					limit = { has_building = building_basic_farm }
					set_building = building_basic_power_plant
				}
				if = {
					limit = { has_building = building_hydroponics_farm_1 }
					set_building = building_power_plant_1
				}
				if = {
					limit = { has_building = building_hydroponics_farm_2 }
					set_building = building_power_plant_2
				}
				if = {
					limit = { has_building = building_hydroponics_farm_3 }
					set_building = building_power_plant_3
				}
				if = {
					limit = { has_building = building_hydroponics_farm_4 }
					set_building = building_power_plant_4
				}		
				if = {
					limit = { has_building = building_hydroponics_farm_5 }
					set_building = building_power_plant_5
				}
			}
		}

		every_owned_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					has_trait = trait_cybernetic
				}
			}
			change_species = last_created
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					has_trait = trait_cybernetic
				}
			}
			planet = {
				create_army = {
					name = random
					owner = root
					type = "android_army"
					species = none
				}
			}
			remove_army = yes
		}
		
		every_owned_leader = {
			limit = { 
				OR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_ruler_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
				}
			}
			change_species = last_created
			change_leader_portrait = species
		}
		every_pool_leader = {
			limit = { 
				OR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_ruler_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
				}
			}
			change_species = last_created
			change_leader_portrait = species
		}
		change_dominant_species = { species = last_created }
		
		every_owned_leader = {
			limit = {
				species = { has_trait = trait_robotic_3 }
				NOR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_admiral_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_general_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_governor_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_scientist_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_ruler_cyborg
			}
		}
		every_pool_leader = {
			limit = {
				species = { has_trait = trait_robotic_3 }
				NOR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_admiral_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_general_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_governor_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_scientist_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_ruler_cyborg
			}
		}
		
		every_country = {
			limit = { 
				is_ai = no 
				NOT = { is_same_value = root }
				has_communications = root
			}
			country_event = { id = utopia.2555 days = 5 }
			country_event = { id = utopia.2556 days = 10 }
		}
		if = {
			limit = {
				any_country = {
					AND = {
						OR = {
							is_country_type = fallen_empire
							is_country_type = awakened_fallen_empire
						}
						has_ethic = ethic_fanatic_spiritualist
					}
				}
			}
			random_country = {
				limit = {
					OR = {
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
					has_ethic = ethic_fanatic_spiritualist
				}
				country_event = { id = utopia.2557 days = 15 }
			}
			else = {
				random_country = {
					limit = {
						is_country_type = default
						has_ethic = ethic_fanatic_spiritualist
						NOT = { is_same_value = root }
					}
					country_event = { id = utopia.2557 days = 15 }
				}
			}
		}

		ROOT = {
			set_country_flag = synthetic_age
		}
	}
	
	option = {
		name = "utopia.2551.a"
		custom_tooltip = SYNTH_ASSIMILATION_CITIZENSHIP_ENABLED
	}
}